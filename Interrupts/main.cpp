#define OS_RUNPRIV   1

#include <sam.h>
#include <sam3xa/include/sam3xa.h>
#include <sam3xa/include/system_sam3xa.h>
#include <hwlib.hpp>

#define pinmask (1<<25)
#define _BV(bit) (0x1u << bit)


extern "C"
{
/* FIXME: should be generated by sock */
//uint32_t SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

/* Clock settings (84MHz) */
#define SYS_BOARD_OSCOUNT   (CKGR_MOR_MOSCXTST(0x8))
#define SYS_BOARD_PLLAR     (CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0xdUL) | CKGR_PLLAR_PLLACOUNT(0x3fUL) | CKGR_PLLAR_DIVA(0x1UL))
#define SYS_BOARD_MCKR      (PMC_MCKR_PRES_CLK_2 | PMC_MCKR_CSS_PLLA_CLK)

uint32_t SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}
    
	void PIOA_Handler(void)
	{
		hwlib::cout << "test" << hwlib::endl;
	}
	
	void PIOB_Handler(void)
	{
		hwlib::cout << "test" << hwlib::endl;
	}
	
	void PIOC_Handler(void)
	{
		hwlib::cout << "test" << hwlib::endl;
	}
	
	void PIOD_Handler(void)
	{
		hwlib::cout << "test" << hwlib::endl;
	}
    
    void initIQR() {
         PMC->PMC_PCER0 |= _BV(ID_PIOB);
        //NVIC_DisableIRQ(PIOB_IRQn);
        NVIC_ClearPendingIRQ(PIOB_IRQn);
        NVIC_SetPriority(PIOB_IRQn, 0);
        NVIC_EnableIRQ(PIOB_IRQn);
        
       
        
       PIOB->PIO_AIMER |= pinmask;
       PIOB->PIO_LSR |= pinmask;
        PIOB->PIO_FELLSR |= pinmask;

        //PIOB->PIO_AIMDR |= pinmask;

       PIOB->PIO_IER |= pinmask;
    }
}

Pio& port_index_to_reg(uint32_t port) {
	switch(port){
		case 0  : return *PIOA;
		case 1  : return *PIOB;
		case 2  : return *PIOC;
		case 3  : return *PIOD;
		default : hwlib::cout << "undefined behaviour"; return *((Pio*) 0x00); // undefined behavior
	}
}

uint32_t port_index_to_id(uint32_t port) {
	switch(port){
		case 0  : return ID_PIOA;
		case 1  : return ID_PIOB;
		case 2  : return ID_PIOC;
		case 3  : return ID_PIOD;
		default : hwlib::cout << "undefined behaviour"; return -1; // undefined behavior
	}
}


int main() {
    SystemInit();
    
  //pmc_enable_periph_clk(ID_PIOA); 

    
    //pmic_init();
    
     //__enable_irq();
     __ASM volatile ("cpsie i");
    
	// kill the watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
    

	initIQR();
    
	hwlib::cout << "Interrupt enabled" << hwlib::endl;

    while (1)  {
        
          uint32_t isr = PIOB->PIO_ISR;
          uint8_t leading_zeros;
          while((leading_zeros=__CLZ(isr))<32)
          {
            uint8_t pin=32-leading_zeros-1;
            //if(callbacksPioB[pin]) callbacksPioB[pin]();
            //if (callbacksPioB[pin])
            
            hwlib::cout << hwlib::dec << (int) pin;
            hwlib::cout << hwlib::endl;
            
            if (pin == 25)  {// pin d2 on Arduino Due board
                //NVIC_DisableIRQ(PIOC_IRQn);
                //NVIC_ClearPendingIRQ(PIOD_IRQn);
                hwlib::cout << "Interrupted!\n";
                hwlib::wait_ms(200);
            }
            isr=isr&(~(1<<pin));
          }
	}
}